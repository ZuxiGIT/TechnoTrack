# 1 "Ass.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "Ass.c"

# 1 "FText.h" 1




# 1 "CPUcommands.h" 1



typedef struct { const char* asm_cmd;
     int cpu_cmd;
    } CPUCMD;

CPUCMD commands[] = {
 {"hlt" , 0},
 {"in" , 1},
 {"out" , 2},
 {"push" , 3},
 {"pop" , 4},
 {"add" , 5},
 {"sub" , 6},
};
# 6 "FText.h" 2


void Translate(Line* lines, size_t txt_size, CPUCMD* commands, size_t cmd_size, int* error_code);


size_t fsize(const char* name);
unsigned char* CreateText(const char* name, const size_t size);


unsigned char toLower(unsigned char symbol);
int isletter(unsigned char symbol);
size_t NumOfLines(const unsigned char* text);
Line* ParseLines(unsigned char* lines, size_t size);




void FPrint(Line* ind, size_t num_of_lines, const char* output = "output.txt");
# 3 "Ass.c" 2


int main(int argc, char const *argv[])
{
 if (argc == 1)
 {
  printf("ERROR: Not input file, enter the filename\n");
  return 1;
 }

 int error_code;

 const char* FILE_NAME = argv[1];

 size_t sz_of_file = fsize(FILE_NAME);

 unsigned char* txt = CreateText(FILE_NAME, sz_of_file);
 size_t num_of_lines = NumOfLines(txt);

 Line* ind = ParseLines(txt, num_of_lines);
 Translate(ind, num_of_lines, commands, sizeof(commands)/sizeof(CPUCMD), &error_code);

 FPrint(ind, num_of_lines);


 return 0;
}
# 1 "FText.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "FText.c"
# 1 "FText.h" 1




# 1 "CPUcommands.h" 1



typedef struct { const char* asm_cmd;
     int cpu_cmd;
    } CPUCMD;

CPUCMD commands[] = {
 {"hlt" , 0},
 {"in" , 1},
 {"out" , 2},
 {"push" , 3},
 {"pop" , 4},
 {"add" , 5},
 {"sub" , 6},
};
# 6 "FText.h" 2


void Translate(Line* lines, size_t txt_size, CPUCMD* commands, size_t cmd_size, int* error_code);


size_t fsize(const char* name);
unsigned char* CreateText(const char* name, const size_t size);


unsigned char toLower(unsigned char symbol);
int isletter(unsigned char symbol);
size_t NumOfLines(const unsigned char* text);
Line* ParseLines(unsigned char* lines, size_t size);




void FPrint(Line* ind, size_t num_of_lines, const char* output = "output.txt");
# 2 "FText.c" 2
# 13 "FText.c"
size_t fsize(const char* name)
{
 assert(name != NULL);

 struct stat stbuf = {};

 if (stat(name, &stbuf) == -1)
 {
  fprintf(stderr, "fsize: can't access %s\n", name);
  return 0;
 }
 if ((stbuf.st_mode & S_IFMT) == S_IFDIR)
 {
  fprintf(stderr, "fsize: can't access %s. It is a directory", name);
  return 0;
 }
 return stbuf.st_size;
}
# 41 "FText.c"
unsigned char* CreateText(const char* name, const size_t size)
{
 assert(name != NULL);

 FILE* fp = fopen(name, "r");

 assert(fp != NULL);

 unsigned char* buff = (unsigned char*)calloc(size + 1, sizeof(unsigned char));

 assert(buff != NULL);

 buff[size] = '\0';

 size_t written_sz = fread(buff, sizeof(unsigned char), size, fp);
 printf("Declared size (sizeof(char)): %zu Written size (sizeof(char)): %zu\n", size, written_sz);

 fclose(fp);

 return buff;
}
# 76 "FText.c"
void FPrint(Line* ind, size_t num_of_lines, const char* output)
{
 FILE* fp = fopen(output, "w");

 assert(fp != NULL);

 for (size_t i = 0; i < num_of_lines; i ++)
  {
   if(ind[i].length == 0)
    continue;
   fprintf(fp, "%s\n", ind[i].start);
  }

 fclose(fp);
}
# 102 "FText.c"
int isletter(unsigned char symbol)
{

 return isalpha(symbol);


}
# 118 "FText.c"
unsigned char toLower(unsigned char symbol)
{

 return (unsigned char)tolower(symbol);






}
# 137 "FText.c"
size_t NumOfLines(const unsigned char* text)
{
 assert(text != NULL);

 size_t i = 0;

 while (*text != '\0')
 {
  if (*text == '\n')
   i++;
  text++;
 }
 i++;
 return i;
}
# 162 "FText.c"
Line* ParseLines(unsigned char* lines, size_t size)
{
 assert(lines != NULL);

 Line* index = (Line*)calloc(size, sizeof(Line));

 assert(index != NULL);

 unsigned char* begin = lines;
 unsigned char* end = begin;
 unsigned char* temp_pointer = NULL;

 for (size_t i = 0; i < size; i ++)
 {
  while (strchr(";\n" , *end) == NULL)
   end++;

  temp_pointer = end;

  if (*temp_pointer == ';')
   while (strchr("\n" , *temp_pointer) == NULL) temp_pointer++;

  *end = '\0';

  index[i].start = begin;
  index[i].finish = end;
  index[i].length = (end - begin);


  begin = temp_pointer + 1;
  end = begin;
 }

 return index;
}

void Translate(Line* lines, size_t txt_size, CPUCMD* commands, size_t cmd_size)
{
 printf("fffff");
}
